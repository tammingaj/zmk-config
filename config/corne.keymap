/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
        combos {
            compatible = "zmk,combos";

            combo_btclr {
                timeout-ms = <50>;
                key-positions = <5 29>;
                bindings = <&bt BT_CLR>;
            };
            combo_bt1 {
                timeout-ms = <50>;
                key-positions = <0 24>;
                bindings = <&bt BT_SEL 0>;
            };
            combo_bt2 {
                timeout-ms = <50>;
                key-positions = <1 25>;
                bindings = <&bt BT_SEL 1>;
            };
            combo_bt3 {
                timeout-ms = <50>;
                key-positions = <2 26>;
                bindings = <&bt BT_SEL 2>;
            };
            combo_bt4 {
                timeout-ms = <50>;
                key-positions = <3 27>;
                bindings = <&bt BT_SEL 3>;
            };
            combo_bt5 {
                timeout-ms = <50>;
                key-positions = <4 28>;
                bindings = <&bt BT_SEL 4>;
            };
            combo_ctrl {
                timeout-ms = <50>;
                key-positions = <25 26>;
                bindings = <&kp LCTRL>;
            };
            combo_alt {
                timeout-ms = <50>;
                key-positions = <26 27>;
                bindings = <&kp LALT>;
            };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  '  | ENT  |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | SHFT |
//                    | ALT | ENT | LWR |   | RSE | SPC  | INS |
                        bindings = <
   &kp TAB     &kp Q &kp W  &kp E    &kp R   &kp T &kp Y &kp U     &kp I     &kp O   &kp P    &kp BSPC
   &kp LCTRL   &kp A &kp S  &kp D    &kp F   &kp G &kp H &kp J     &kp K     &kp L   &kp SQT  &kp RET
   &kp LSHFT   &kp Z &kp X  &kp C    &kp V   &kp B &kp N &kp M     &kp COMMA &kp DOT &kp FSLH &kp RSHFT
                            &kp LALT &to 3   &mo 1 &mo 2 &kp SPACE &kp INS
                        >;
                };

                green_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |  DEL  |
// | CTRL |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  ENT  |
// | SHFT |  +  |  -  |  =  |  {  |  }  |   |  [  |  ]  |  ;  |  :  |  \  | C/A/D |
//                    | CAPS|     | trs |   |     | SPC |  .  |
                        bindings = <
   &kp ESC     &kp N1   &kp N2    &kp N3    &kp N4    &kp N5      &kp N6    &kp N7    &kp N8          &kp N9    &kp N0   &kp DEL
   &trans      &kp EXCL &kp AT    &kp HASH  &kp DLLR  &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR  &kp RPAR &kp RET
   &trans      &kp PLUS &kp MINUS &kp EQUAL &kp LPAR  &kp RPAR    &kp LBKT  &kp RBKT  &kp SEMI        &kp COLON &kp BSLH &kp LC(LA(DEL))
                                  &kp CAPS  &none     &trans      &none     &kp SPACE &kp DOT
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |      |  >   |  ]   |  )   |  }   |     |  paste |  home  |  up   |  end    |  pgup  | prtsc |
// |      |      |  <   |  [   |  (   |  {   |     |  copy  |  left  |  down |  right  |  pgdn  | lctrl |
// |  F1  |  F2  |  F3  |  F4  |  F5  |  F6  |     |  F7    |  F8    |  F9   |  F10    |  F11   |  F12  |
//                      | INS  | SHFT |  CTR |     |  trans |  cut   | tilde |
                        bindings = <
   &kp TAB &none  &kp GT &kp RBKT  &kp RPAR  &kp RBRC  &kp LC(V) &kp HOME  &kp UP   &kp END   &kp PG_UP &kp PSCRN
   &none   &none  &kp LT &kp LBKT  &kp LPAR  &kp LBRC  &kp LC(C) &kp LEFT  &kp DOWN &kp RIGHT &kp PG_DN &kp LCTRL
   &kp F1  &kp F2 &kp F3 &kp F4    &kp F5    &kp F6    &kp F7    &kp F8    &kp F9   &kp F10   &kp F11   &kp F12
                         &kp INS   &kp LSHFT &kp LCTRL &trans    &kp LC(X) &kp TILDE
                        >;
                };

                numpad_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |      |    |     |     |     |     |  *  |  7  |  8  |  9  |  -  | BKSP |
// |      |      |    |     |     |     |     |  /  |  4  |  5  |  6  |  +  | ENT  |
// |      |      |    |     |     |     |     |  ,  |  1  |  2  |  3  |  .  |      |
//                    |     |     |     |     |     | SPC |  0  |
                        bindings = <
   &kp TAB &none  &none &none  &none  &none  &kp KP_MULTIPLY &kp N7    &kp N8 &kp N9 &kp MINUS &kp BSPC
   &none   &none  &none &none  &none  &none  &kp FSLH        &kp N4    &kp N5 &kp N6 &kp PLUS  &kp RET
   &none   &none  &none &none  &none  &none  &kp COMMA       &kp N1    &kp N2 &kp N3 &kp DOT   &none
                        &none  &to 0  &none  &none           &kp SPACE &none
                        >;
                };
        };
};

